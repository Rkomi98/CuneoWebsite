'<br><b>Positività(%)</b>: %{x}',
'<br><b>Efficienza(%)</b>: %{y}',
'<br><b>Ricezione</b>: %{marker.size}<extra></extra>'),
color = ~positività,
marker = list(size = ~N_receptions, sizemode = "area", sizeref = 0.005, opacity = 0.5),
text = ~player_name
)
fig <- fig %>% layout(title = 'Qualità Ricezione',
xaxis = list(title = 'Positività', showgrid = TRUE),
yaxis = list(title = 'Efficienza', showgrid = TRUE)
)
fig
# Assuming you have your data frame 'data_plot' with columns 'player_name' and 'efficienza'
# Calculate the color based on efficienza values
data_plot <- table_data %>%
mutate(color = case_when(
(player_name %in% c("Serena Scognamillo", "Federica Ferrario") & efficienza >= percent(0.56)) |
(player_name %in% c("Lena Stigrot", "Anna Haak") & efficienza >= percent(0.37)) |
(player_name %in% c("Alice Tanase", "Madison Kubik") & efficienza >= percent(0.43)) |
efficienza >= percent(0.42) ~ "lightgreen",
(player_name %in% c("Serena Scognamillo", "Federica Ferrario") & efficienza > percent(0.48) & efficienza < percent(0.56)) |
(player_name %in% c("Lena Stigrot", "Anna Haak") & efficienza > percent(0.31) & efficienza < percent(0.37)) |
(player_name %in% c("Alice Tanase", "Madison Kubik") & efficienza > percent(0.37) & efficienza < percent(0.43)) |
(efficienza > percent(0.41) & efficienza < percent(0.42)) ~ "orange",
(player_name %in% c("Serena Scognamillo", "Federica Ferrario") & efficienza <= percent(0.48) ) |
(player_name %in% c("Lena Stigrot", "Anna Haak") & efficienza <= percent(0.31)) |
(player_name %in% c("Alice Tanase", "Madison Kubik") & efficienza <= percent(0.37)) |
efficienza < percent(0.41) ~ "lightcoral",
TRUE ~ NA_character_
))
fig <- plot_ly(
x = data_plot$player_name,
y = round(data_plot$efficienza, digits = 2),
marker = list(color = data_plot$color),
name = "Efficienza in Ricezione",
type = "bar",
text = round(data_plot$efficienza, digits = 2), textposition = 'auto', marker = list(color = 'rgb(158,202,225)', line = list(color = 'rgb(8,48,107)', width = 1.5)))
fig <- fig %>% layout(title = "Efficienza in Ricezione",
xaxis = list(title = ""),
yaxis = list(title = ""))
fig
saveWidget(fig, "Ricezione.html")
#  end_zone == 5
table_data <- px %>%
dplyr::filter(skill == "Attack", team == teamName) %>%
group_by(player_name) %>%
dplyr::summarize(
N_attacks = n(),
count_perfette = sum(evaluation_code == "#", na.rm = TRUE),
count_positive = sum(evaluation_code == "+", na.rm = TRUE),
#count_escalamative = sum(evaluation_code == "!", na.rm = TRUE),
#count_negative = sum(evaluation_code == "-", na.rm = TRUE),
count_errori = sum(evaluation_code == "=", na.rm = TRUE),
positività = percent((count_positive + count_perfette)/N_attacks, digits = 0),
efficienza = percent((count_positive + count_perfette - count_errori)/N_attacks, digits = 0),
)
data_plot <- table_data
table_data
# Compute the total statistics
total_stats <- table_data %>%
summarise(
N_attacks = sum(N_attacks),
count_perfette = sum(count_perfette),
count_positive = sum(count_positive),
count_errori = sum(count_errori),
positività = percent(sum(count_positive + count_perfette) / sum(N_attacks)),
efficienza = percent(sum(count_positive + count_perfette - count_errori) / sum(N_attacks))
) %>%
mutate(player_name = "TOT. Squadra")  # Add a player_name for the team total row
# Add the total row to the table data
table_data <- bind_rows(table_data, total_stats)
table_data <- table_data %>%
#select(-efficienza) %>%
select(1, 7, everything())
# Apply custom CSS styling to the entire table
styled_table <- table_data %>%
kable("html") %>%
kable_styling(full_width = FALSE, htmltable_class = 'styled-table', html_font = '"Be Vietnam Pro", sans-serif') %>%
column_spec(2, background = case_when(
(table_data$player_name == "Anna Adelusi" | table_data$player_name == "Terry Ruth Enweonwu") ~ ifelse(table_data$efficienza >= percent(0.27), "lightgreen", ifelse(table_data$efficienza > percent(0.24) & table_data$efficienza < percent(0.27), "yellow", "lightcoral")),
(table_data$player_name == "Anna Haak" | table_data$player_name == "Lena Stigrot") ~ ifelse(table_data$efficienza >= percent(0.34), "lightgreen", ifelse(table_data$efficienza > percent(0.30) & table_data$efficienza < percent(0.34), "yellow", "lightcoral")),
(table_data$player_name == "Alice Tanase" | table_data$player_name == "Madison Kubik") ~ ifelse(table_data$efficienza >= percent(0.24), "lightgreen", ifelse(table_data$efficienza > percent(0.20) & table_data$efficienza < percent(0.24), "yellow", "lightcoral")),
(table_data$player_name == "Saly Thior" | table_data$player_name == "Amandha Sylves" | table_data$player_name == "Anna Hall" | table_data$player_name == "Beatrice Molinaro") ~ ifelse(table_data$efficienza >= percent(0.44), "lightgreen", ifelse(table_data$efficienza > percent(0.38) & table_data$efficienza < percent(0.44), "yellow", "lightcoral")),
TRUE ~ ifelse(table_data$efficienza >= percent(0.42), "lightgreen", ifelse(table_data$efficienza > percent(0.41) & table_data$efficienza < percent(0.42), "orange", "red"))
)
)
# Save the styled table to an HTML file
writeLines(as.character(styled_table), "Attacco_tab.html")
fig <- plot_ly(data_plot,
x = ~positività,
y = ~efficienza,
type = 'scatter',
mode = 'markers',
hovertemplate = paste('<i>Player</i>: %{text}',
'<br><b>Positività(%)</b>: %{x}',
'<br><b>Efficienza(%)</b>: %{y}',
'<br><b>Attacchi</b>: %{marker.size}<extra></extra>'),
color = ~positività,
marker = list(size = ~N_attacks, sizemode = "area", sizeref = 0.005, opacity = 0.5),
text = ~player_name
)
fig <- fig %>% layout(title = 'Qualità Attacco',
xaxis = list(title = 'Positività', showgrid = FALSE),
yaxis = list(title = 'Efficienza', showgrid = FALSE)
)
fig
# Add a new column 'color' based on the rules provided
data_plot <- table_data %>%
mutate(color = case_when(
(player_name %in% c("Anna Adelusi", "Terry Ruth Enweonwu") & efficienza >= percent(0.27)) |
(player_name %in% c("Anna Haak", "Lena Stigrot") & efficienza >= percent(0.34)) |
(player_name %in% c("Alice Tanase", "Madison Kubik") & efficienza >= percent(0.24)) |
(player_name %in% c("Saly Thior", "Amandha Sylves", "Anna Hall", "Beatrice Molinaro") & efficienza >= percent(0.44)) |
efficienza >= percent(0.42) ~ "lightgreen",
(player_name %in% c("Anna Adelusi", "Terry Ruth Enweonwu") & efficienza > percent(0.24) & efficienza < percent(0.27)) |
(player_name %in% c("Anna Haak", "Lena Stigrot") & efficienza > percent(0.30) & efficienza < percent(0.34)) |
(player_name %in% c("Alice Tanase", "Madison Kubik") & efficienza > percent(0.20) & efficienza < percent(0.24)) |
(player_name %in% c("Saly Thior", "Amandha Sylves", "Anna Hall", "Beatrice Molinaro") & efficienza > percent(0.38) & efficienza < percent(0.44)) |
(efficienza > percent(0.41) & efficienza < percent(0.42)) ~ "orange",
(player_name %in% c("Anna Adelusi", "Terry Ruth Enweonwu") & efficienza <= percent(0.24)) |
(player_name %in% c("Anna Haak", "Lena Stigrot") & efficienza <= percent(0.30)) |
(player_name %in% c("Alice Tanase", "Madison Kubik") & efficienza <= percent(0.20)) |
(player_name %in% c("Saly Thior", "Amandha Sylves", "Anna Hall", "Beatrice Molinaro") & efficienza <= percent(0.38)) |
efficienza < percent(0.41) ~ "lightcoral",
TRUE ~ NA_character_
))
fig <- plot_ly(
x = data_plot$player_name,
y = round(data_plot$efficienza, digits = 2),
marker = list(color = data_plot$color),
name = "Efficienza in Attacco",
type = "bar",
text = round(data_plot$efficienza, digits = 2), textposition = 'auto', marker = list(color = 'rgb(158,202,225)', line = list(color = 'rgb(8,48,107)', width = 1.5)))
fig <- fig %>% layout(title = "Efficienza in Attacco",
xaxis = list(title = ""),
yaxis = list(title = ""))
fig
saveWidget(fig, "Attacco.html")
attack_rate <- px %>% dplyr::filter(skill == "Attack", team == teamName) %>%
group_by(team, start_zone) %>% dplyr::summarize(n_attacks = n()) %>%
mutate(rate = n_attacks/sum(n_attacks)) %>% ungroup
## add x, y coordinates associated with the zones
attack_rate <- cbind(attack_rate, dv_xy(attack_rate$start_zone, end = "lower"))
## for team 2, these need to be on the top half of the diagram
tm2i <- attack_rate$team == teams(px)[2]
attack_rate[tm2i, c("x", "y")] <- dv_flip_xy(attack_rate[tm2i, c("x", "y")])
ggplot(attack_rate, aes(x, y, fill = rate)) + geom_tile() + ggcourt(labels = teams(px)) +
scale_fill_gradient2(name = "Attack rate")
View(attack_rate)
View(px)
attack_rate <- px %>% dplyr::filter(skill == "Attack", team == teamName, visiting_setter_position == 1) %>%
group_by(team, start_zone) %>% dplyr::summarize(n_attacks = n()) %>%
mutate(rate = n_attacks/sum(n_attacks)) %>% ungroup
## add x, y coordinates associated with the zones
attack_rate <- cbind(attack_rate, dv_xy(attack_rate$start_zone, end = "lower"))
## for team 2, these need to be on the top half of the diagram
tm2i <- attack_rate$team == teams(px)[2]
attack_rate[tm2i, c("x", "y")] <- dv_flip_xy(attack_rate[tm2i, c("x", "y")])
ggplot(attack_rate, aes(x, y, fill = rate)) + geom_tile() + ggcourt(labels = teams(px)) +
scale_fill_gradient2(name = "Attack rate")
View(attack_rate)
attack_rate <- px %>% dplyr::filter(skill == "Attack", team == teamName) %>%
group_by(team, start_zone, visiting_setter_position) %>% dplyr::summarize(n_attacks = n()) %>%
mutate(rate = n_attacks/sum(n_attacks)) %>% ungroup
## add x, y coordinates associated with the zones
attack_rate <- cbind(attack_rate, dv_xy(attack_rate$start_zone, end = "lower"))
## for team 2, these need to be on the top half of the diagram
tm2i <- attack_rate$team == teams(px)[2]
attack_rate[tm2i, c("x", "y")] <- dv_flip_xy(attack_rate[tm2i, c("x", "y")])
ggplot(attack_rate, aes(x, y, fill = rate)) + geom_tile() + ggcourt(labels = teams(px)) +
scale_fill_gradient2(name = "Attack rate")
View(attack_rate)
attack_rate <- px %>% dplyr::filter(skill == "Attack", team == teamName, visiting_setter_position == 1) %>%
group_by(team, start_zone) %>% dplyr::summarize(n_attacks = n()) %>%
mutate(rate = n_attacks/sum(n_attacks)) %>% ungroup
## add x, y coordinates associated with the zones
attack_rate <- cbind(attack_rate, dv_xy(attack_rate$start_zone, end = "lower"))
## for team 2, these need to be on the top half of the diagram
tm2i <- attack_rate$team == teams(px)[2]
attack_rate[tm2i, c("x", "y")] <- dv_flip_xy(attack_rate[tm2i, c("x", "y")])
ggplot(attack_rate, aes(x, y, fill = rate)) + geom_tile() + ggcourt(labels = teams(px)) +
scale_fill_gradient2(name = "Attack rate")
attack_rate <- px %>% dplyr::filter(skill == "Attack", team == teamName, visiting_setter_position == 2) %>%
group_by(team, start_zone) %>% dplyr::summarize(n_attacks = n()) %>%
mutate(rate = n_attacks/sum(n_attacks)) %>% ungroup
## add x, y coordinates associated with the zones
attack_rate <- cbind(attack_rate, dv_xy(attack_rate$start_zone, end = "lower"))
## for team 2, these need to be on the top half of the diagram
tm2i <- attack_rate$team == teams(px)[2]
attack_rate[tm2i, c("x", "y")] <- dv_flip_xy(attack_rate[tm2i, c("x", "y")])
ggplot(attack_rate, aes(x, y, fill = rate)) + geom_tile() + ggcourt(labels = teams(px)) +
scale_fill_gradient2(name = "Attack rate")
attack_rate <- px %>% dplyr::filter(skill == "Attack", team == teamName, visiting_setter_position == 3) %>%
group_by(team, start_zone) %>% dplyr::summarize(n_attacks = n()) %>%
mutate(rate = n_attacks/sum(n_attacks)) %>% ungroup
## add x, y coordinates associated with the zones
attack_rate <- cbind(attack_rate, dv_xy(attack_rate$start_zone, end = "lower"))
## for team 2, these need to be on the top half of the diagram
tm2i <- attack_rate$team == teams(px)[2]
attack_rate[tm2i, c("x", "y")] <- dv_flip_xy(attack_rate[tm2i, c("x", "y")])
ggplot(attack_rate, aes(x, y, fill = rate)) + geom_tile() + ggcourt(labels = teams(px)) +
scale_fill_gradient2(name = "Attack rate")
# Round the rate to the second digit
attack_rate$rate_rounded <- round(attack_rate$rate, 2)
# Plotting with rounded percentage on each position
ggplot(attack_rate, aes(x, y, fill = rate_rounded)) +
geom_tile() +
ggcourt(labels = teams(px)) +
scale_fill_gradient2(name = "Attack rate (%)", labels = scales::percent_format(accuracy = 0.01))
# Round the rate to the second digit
attack_rate$rate_rounded <- round(attack_rate$rate, 2)
# Plotting with rounded percentage on each position
ggplot(attack_rate, aes(x, y, fill = rate_rounded)) +
geom_tile() +
geom_text(aes(label = paste0(round(rate_rounded * 100, 2), "%")), color = "black", size = 3) +
ggcourt(labels = teams(px)) +
scale_fill_gradient2(name = "Attack rate (%)", labels = scales::percent_format(accuracy = 0.01))
attack_rate <- px %>% dplyr::filter(skill == "Attack", team == teamName, visiting_setter_position == 3) %>%
group_by(team, start_zone) %>% dplyr::summarize(n_attacks = n()) %>%
mutate(rate = n_attacks/sum(n_attacks)) %>% ungroup
## add x, y coordinates associated with the zones
attack_rate <- cbind(attack_rate, dv_xy(attack_rate$start_zone, end = "lower"))
## for team 2, these need to be on the top half of the diagram
tm2i <- attack_rate$team == teams(px)[2]
attack_rate[tm2i, c("x", "y")] <- dv_flip_xy(attack_rate[tm2i, c("x", "y")])
#ggplot(attack_rate, aes(x, y, fill = rate)) + geom_tile() + ggcourt(labels = teams(px)) + scale_fill_gradient2(name = "Attack rate")
# Round the rate to the second digit
attack_rate$rate_rounded <- round(attack_rate$rate, 2)
# Plotting with rounded percentage on each position
ggplot(attack_rate, aes(x, y, fill = rate_rounded)) +
geom_tile() +
geom_text(aes(label = paste0(round(rate_rounded * 100, 2), "%")), color = "black", size = 3) +
ggcourt(labels = teams(px)) +
scale_fill_gradient2(name = "Attack rate (%)", labels = scales::percent_format(accuracy = 0.01))
attack_rate <- px %>% dplyr::filter(skill == "Attack", team == teamName, visiting_setter_position == 3) %>%
group_by(team, start_zone) %>% dplyr::summarize(n_attacks = n()) %>%
mutate(rate = n_attacks/sum(n_attacks)) %>% ungroup
## add x, y coordinates associated with the zones
attack_rate <- cbind(attack_rate, dv_xy(attack_rate$start_zone, end = "lower"))
## for team 2, these need to be on the top half of the diagram
tm2i <- attack_rate$team == teams(px)[2]
attack_rate[tm2i, c("x", "y")] <- dv_flip_xy(attack_rate[tm2i, c("x", "y")])
#ggplot(attack_rate, aes(x, y, fill = rate)) + geom_tile() + ggcourt(labels = teams(px)) + scale_fill_gradient2(name = "Attack rate")
# Round the rate to the second digit
attack_rate$rate_rounded <- round(attack_rate$rate, 2)
# Plotting with rounded percentage on each position
ggplot(attack_rate, aes(x, y, fill = rate_rounded)) +
geom_tile() +
geom_text(aes(label = paste0(round(rate_rounded * 100, 2), "%")), color = "black", size = 3) +
ggcourt(labels = teams(px)) +
scale_fill_gradient2(name = "Attack rate (%)", labels = scales::percent_format(accuracy = 0.01))
saveWidget(fig, "Distribuzione3.html")
for (i in 1:6){
attack_rate <- px %>% dplyr::filter(skill == "Attack", team == teamName, visiting_setter_position == i) %>%
group_by(team, start_zone) %>% dplyr::summarize(n_attacks = n()) %>%
mutate(rate = n_attacks/sum(n_attacks)) %>% ungroup
## add x, y coordinates associated with the zones
attack_rate <- cbind(attack_rate, dv_xy(attack_rate$start_zone, end = "lower"))
## for team 2, these need to be on the top half of the diagram
tm2i <- attack_rate$team == teams(px)[2]
attack_rate[tm2i, c("x", "y")] <- dv_flip_xy(attack_rate[tm2i, c("x", "y")])
#ggplot(attack_rate, aes(x, y, fill = rate)) + geom_tile() + ggcourt(labels = teams(px)) + scale_fill_gradient2(name = "Attack rate")
# Round the rate to the second digit
attack_rate$rate_rounded <- round(attack_rate$rate, 2)
# Plotting with rounded percentage on each position
ggplot(attack_rate, aes(x, y, fill = rate_rounded)) +
geom_tile() +
geom_text(aes(label = paste0(round(rate_rounded * 100, 2), "%")), color = "black", size = 3) +
ggcourt(labels = teams(px)) +
scale_fill_gradient2(name = "Attack rate (%)", labels = scales::percent_format(accuracy = 0.01))
html_name <- paste0("Distribuzione", i, ".html")
saveWidget(fig, html_name)
}
for (i in 1:6){
attack_rate <- px %>% dplyr::filter(skill == "Attack", team == teamName, visiting_setter_position == i) %>%
group_by(team, start_zone) %>% dplyr::summarize(n_attacks = n()) %>%
mutate(rate = n_attacks/sum(n_attacks)) %>% ungroup
## add x, y coordinates associated with the zones
attack_rate <- cbind(attack_rate, dv_xy(attack_rate$start_zone, end = "lower"))
## for team 2, these need to be on the top half of the diagram
tm2i <- attack_rate$team == teams(px)[2]
attack_rate[tm2i, c("x", "y")] <- dv_flip_xy(attack_rate[tm2i, c("x", "y")])
#ggplot(attack_rate, aes(x, y, fill = rate)) + geom_tile() + ggcourt(labels = teams(px)) + scale_fill_gradient2(name = "Attack rate")
# Round the rate to the second digit
attack_rate$rate_rounded <- round(attack_rate$rate, 2)
# Plotting with rounded percentage on each position
fig <- ggplot(attack_rate, aes(x, y, fill = rate_rounded)) +
geom_tile() +
geom_text(aes(label = paste0(round(rate_rounded * 100, 2), "%")), color = "black", size = 3) +
ggcourt(labels = teams(px)) +
scale_fill_gradient2(name = "Attack rate (%)", labels = scales::percent_format(accuracy = 0.01))
html_name <- paste0("Distribuzione", i, ".html")
saveWidget(fig, html_name)
}
for (i in 1:6){
attack_rate <- px %>%
dplyr::filter(skill == "Attack", team == teamName, visiting_setter_position == i) %>%
group_by(team, start_zone) %>%
dplyr::summarize(n_attacks = n()) %>%
mutate(rate = n_attacks/sum(n_attacks)) %>%
ungroup
attack_rate <- cbind(attack_rate, dv_xy(attack_rate$start_zone, end = "lower"))
tm2i <- attack_rate$team == teams(px)[2]
attack_rate[tm2i, c("x", "y")] <- dv_flip_xy(attack_rate[tm2i, c("x", "y")])
attack_rate$rate_rounded <- round(attack_rate$rate, 2)
fig <- ggplot(attack_rate, aes(x, y, fill = rate_rounded)) +
geom_tile() +
geom_text(aes(label = paste0(round(rate_rounded * 100, 2), "%")), color = "black", size = 3) +
ggcourt(labels = teams(px)) +
scale_fill_gradient2(name = "Attack rate (%)", labels = scales::percent_format(accuracy = 0.01))
html_name <- paste0("Distribuzione", i, ".html")
saveWidget(fig, html_name)
}
for (i in 1:6){
attack_rate <- px %>% dplyr::filter(skill == "Attack", team == teamName, visiting_setter_position == i) %>%
group_by(team, start_zone) %>% dplyr::summarize(n_attacks = n()) %>%
mutate(rate = n_attacks/sum(n_attacks)) %>% ungroup
## add x, y coordinates associated with the zones
attack_rate <- cbind(attack_rate, dv_xy(attack_rate$start_zone, end = "lower"))
## for team 2, these need to be on the top half of the diagram
tm2i <- attack_rate$team == teams(px)[2]
attack_rate[tm2i, c("x", "y")] <- dv_flip_xy(attack_rate[tm2i, c("x", "y")])
#ggplot(attack_rate, aes(x, y, fill = rate)) + geom_tile() + ggcourt(labels = teams(px)) + scale_fill_gradient2(name = "Attack rate")
# Round the rate to the second digit
attack_rate$rate_rounded <- round(attack_rate$rate, 2)
# Plotting with rounded percentage on each position
fig <- ggplot(attack_rate, aes(x, y, fill = rate_rounded)) +
geom_tile() +
geom_text(aes(label = paste0(round(rate_rounded * 100, 2), "%")), color = "black", size = 3) +
ggcourt(labels = teams(px)) +
scale_fill_gradient2(name = "Attack rate (%)", labels = scales::percent_format(accuracy = 0.01))
html_name <- paste0("Distribuzione", i, ".html")
#saveWidget(fig, html_name)
}
for (i in 1:6){
attack_rate <- px %>% dplyr::filter(skill == "Attack", team == teamName, visiting_setter_position == i) %>%
group_by(team, start_zone) %>% dplyr::summarize(n_attacks = n()) %>%
mutate(rate = n_attacks/sum(n_attacks)) %>% ungroup
## add x, y coordinates associated with the zones
attack_rate <- cbind(attack_rate, dv_xy(attack_rate$start_zone, end = "lower"))
## for team 2, these need to be on the top half of the diagram
tm2i <- attack_rate$team == teams(px)[2]
attack_rate[tm2i, c("x", "y")] <- dv_flip_xy(attack_rate[tm2i, c("x", "y")])
#ggplot(attack_rate, aes(x, y, fill = rate)) + geom_tile() + ggcourt(labels = teams(px)) + scale_fill_gradient2(name = "Attack rate")
# Round the rate to the second digit
attack_rate$rate_rounded <- round(attack_rate$rate, 2)
# Plotting with rounded percentage on each position
fig <- ggplot(attack_rate, aes(x, y, fill = rate_rounded)) +
geom_tile() +
geom_text(aes(label = paste0(round(rate_rounded * 100, 2), "%")), color = "black", size = 3) +
ggcourt(labels = teams(px)) +
scale_fill_gradient2(name = "Attack rate (%)", labels = scales::percent_format(accuracy = 0.01))
html_name <- paste0("Distribuzione", i, ".html")
saveWidget(fig, html_name)
}
for (i in 1:6){
attack_rate <- px %>% dplyr::filter(skill == "Attack", team == teamName, visiting_setter_position == i) %>%
group_by(team, start_zone) %>% dplyr::summarize(n_attacks = n()) %>%
mutate(rate = n_attacks/sum(n_attacks)) %>% ungroup
## add x, y coordinates associated with the zones
attack_rate <- cbind(attack_rate, dv_xy(attack_rate$start_zone, end = "lower"))
## for team 2, these need to be on the top half of the diagram
tm2i <- attack_rate$team == teams(px)[2]
attack_rate[tm2i, c("x", "y")] <- dv_flip_xy(attack_rate[tm2i, c("x", "y")])
#ggplot(attack_rate, aes(x, y, fill = rate)) + geom_tile() + ggcourt(labels = teams(px)) + scale_fill_gradient2(name = "Attack rate")
# Round the rate to the second digit
attack_rate$rate_rounded <- round(attack_rate$rate, 2)
# Plotting with rounded percentage on each position
ggplot(attack_rate, aes(x, y, fill = rate_rounded)) +
geom_tile() +
geom_text(aes(label = paste0(round(rate_rounded * 100, 2), "%")), color = "black", size = 3) +
ggcourt(labels = teams(px)) +
scale_fill_gradient2(name = "Attack rate (%)", labels = scales::percent_format(accuracy = 0.01))
html_name <- paste0("Distribuzione", i, ".html")
saveWidget(fig, html_name)
}
fig
saveWidget(fig, html_name)
saveWidget(fig, "Distribuzione")
saveWidget(fig, "Distribuzione.html")
saveWidget(fig, "Distr.html")
library(ggplot2)
library(htmlwidgets)
for (i in 1:6) {
attack_rate <- px %>%
dplyr::filter(skill == "Attack", team == teamName, visiting_setter_position == i) %>%
group_by(team, start_zone) %>%
dplyr::summarize(n_attacks = n()) %>%
mutate(rate = n_attacks/sum(n_attacks)) %>%
ungroup
attack_rate <- cbind(attack_rate, dv_xy(attack_rate$start_zone, end = "lower"))
tm2i <- attack_rate$team == teams(px)[2]
attack_rate[tm2i, c("x", "y")] <- dv_flip_xy(attack_rate[tm2i, c("x", "y")])
attack_rate$rate_rounded <- round(attack_rate$rate, 2)
fig <- ggplot(attack_rate, aes(x, y, fill = rate_rounded)) +
geom_tile() +
geom_text(aes(label = paste0(round(rate_rounded * 100, 2), "%")), color = "black", size = 3) +
ggcourt(labels = teams(px)) +
scale_fill_gradient2(name = "Attack rate (%)", labels = scales::percent_format(accuracy = 0.01))
html_name <- paste0("Distribuzione", i, ".html")
# Save the plot as an HTML file
saveWidget(fig, file = html_name)
}
library(shiny)
install.packages("shiny")
library(shiny)
# Define UI for application
ui <- fluidPage(
titlePanel("Cuneo Data Analysis"),
sidebarLayout(
sidebarPanel(
# Add sidebar elements here if needed
),
mainPanel(
# Output plots and analysis results
plotOutput("plot1"),
plotOutput("plot2"),
# Add additional outputs as necessary
)
)
)
runApp('GitHub/CuneoWebsite.io/Backend')
runApp('GitHub/CuneoWebsite.io/Backend')
runApp('GitHub/CuneoWebsite.io/Backend')
setwd("~/GitHub/CuneoWebsite.io/Backend")
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
# Define UI for the application
ui <- fluidPage(
titlePanel("Cuneo Data Analysis"),
sidebarLayout(
sidebarPanel(
# Add sidebar elements here if needed
),
mainPanel(
# Output plots and analysis results
plotOutput("plot1"),
#plotOutput("plot2"),
# Add additional outputs as necessary
)
)
)
runApp()
runApp()
runApp()
runApp()
runApp()
knitr::purl(input = "Cuneo.Rmd", output = "Cuneo.R",documentation = 0)
#install.packages(c("datavolley", "ovlytics"))
library(datavolley)
library(ggplot2)
library(dplyr)
library(ovlytics)
filename <- "Assets/&##Backup##_R00 HONDA O-ALLIANZ V.dvw"
teamName = 'HONDA OLIVERO S.BERNARDO CUNEO'
x <- dv_read(filename)
library(formattable)
library("formattable")
#install.packages(c("datavolley", "ovlytics"))
library(datavolley)
library(ggplot2)
library(dplyr)
filename <- "Assets/&##Backup##_R00 HONDA O-ALLIANZ V.dvw"
teamName = 'HONDA OLIVERO S.BERNARDO CUNEO'
x <- dv_read(filename)
filename <- "C:/Users/mirko/Documents/GitHub/CuneoWebsite.io/Assets/&##Backup##_R00 HONDA O-ALLIANZ V.dvw"
teamName = 'HONDA OLIVERO S.BERNARDO CUNEO'
x <- dv_read(filename)
serve_idx <- find_serves(plays(x))
table(plays(x)$team[serve_idx])
## find rows where a single player is on court
player_on_court <- function(x, target_player_id, team = NULL) {
if (!is.null(team)) team <- match.arg(team, c("home", "visiting"))
## 'team' is optional here, if NULL then we look at both home and visiting teams
idx <- rep(FALSE, nrow(x))
if (is.null(team) || team == "home") {
idx <- idx | x$home_player_id1 == target_player_id | x$home_player_id2 == target_player_id | x$home_player_id3 == target_player_id |
x$home_player_id4 == target_player_id | x$home_player_id5 == target_player_id | x$home_player_id6 == target_player_id
}
if (is.null(team) || team == "visiting") {
idx <- idx | x$visiting_player_id1 == target_player_id | x$visiting_player_id2 == target_player_id | x$visiting_player_id3 == target_player_id |
x$visiting_player_id4 == target_player_id | x$visiting_player_id5 == target_player_id | x$visiting_player_id6 == target_player_id
}
idx[is.na(idx)] <- FALSE
idx
}
d <- dir("C:/Users/mirko/Documents/GitHub/CuneoWebsite.io/Assets/", pattern = "dvw$", full.names = TRUE)
lx <- list()
## read each file
for (fi in seq_along(d)) lx[[fi]] <- dv_read(d[fi], insert_technical_timeouts = FALSE)
## now extract the play-by-play component from each and bind them together
px <- list()
for (fi in seq_along(lx)) px[[fi]] <- plays(lx[[fi]])
px <- do.call(rbind, px)
#, end_zone == 5
table_data <- px %>%
dplyr::filter(skill == "Serve", team == teamName) %>%
group_by(player_name) %>%
dplyr::summarize(
N_battute = n(),
count_perfette = sum(evaluation_code == "#", na.rm = TRUE),
count_positive = sum(evaluation_code == "+", na.rm = TRUE),
#count_escalamative = sum(evaluation_code == "!", na.rm = TRUE),
#count_negative = sum(evaluation_code == "-", na.rm = TRUE),
count_errori = sum(evaluation_code == "=", na.rm = TRUE),
positività = percent((count_positive + count_perfette)/N_battute, digits = 0),
efficienza = percent((count_positive + count_perfette - count_errori)/N_battute, digits = 0),
)
