for (i in 1:6){
attack_rate <- px %>% dplyr::filter(skill == "Attack", team == teamName, visiting_setter_position == i) %>%
group_by(team, start_zone) %>% dplyr::summarize(n_attacks = n()) %>%
mutate(rate = n_attacks/sum(n_attacks)) %>% ungroup
## add x, y coordinates associated with the zones
attack_rate <- cbind(attack_rate, dv_xy(attack_rate$start_zone, end = "lower"))
## for team 2, these need to be on the top half of the diagram
tm2i <- attack_rate$team == teams(px)[2]
attack_rate[tm2i, c("x", "y")] <- dv_flip_xy(attack_rate[tm2i, c("x", "y")])
#ggplot(attack_rate, aes(x, y, fill = rate)) + geom_tile() + ggcourt(labels = teams(px)) + scale_fill_gradient2(name = "Attack rate")
# Round the rate to the second digit
attack_rate$rate_rounded <- round(attack_rate$rate, 2)
# Plotting with rounded percentage on each position
ggplot(attack_rate, aes(x, y, fill = rate_rounded)) +
geom_tile() +
geom_text(aes(label = paste0(round(rate_rounded * 100, 2), "%")), color = "black", size = 3) +
ggcourt(labels = teams(px)) +
scale_fill_gradient2(name = "Attack rate (%)", labels = scales::percent_format(accuracy = 0.01))
html_name <- paste0("Distribuzione", i, ".html")
saveWidget(fig, html_name)
}
for (i in 1:6){
attack_rate <- px %>% dplyr::filter(skill == "Attack", team == teamName, visiting_setter_position == i) %>%
group_by(team, start_zone) %>% dplyr::summarize(n_attacks = n()) %>%
mutate(rate = n_attacks/sum(n_attacks)) %>% ungroup
## add x, y coordinates associated with the zones
attack_rate <- cbind(attack_rate, dv_xy(attack_rate$start_zone, end = "lower"))
## for team 2, these need to be on the top half of the diagram
tm2i <- attack_rate$team == teams(px)[2]
attack_rate[tm2i, c("x", "y")] <- dv_flip_xy(attack_rate[tm2i, c("x", "y")])
#ggplot(attack_rate, aes(x, y, fill = rate)) + geom_tile() + ggcourt(labels = teams(px)) + scale_fill_gradient2(name = "Attack rate")
# Round the rate to the second digit
attack_rate$rate_rounded <- round(attack_rate$rate, 2)
# Plotting with rounded percentage on each position
fig <- ggplot(attack_rate, aes(x, y, fill = rate_rounded)) +
geom_tile() +
geom_text(aes(label = paste0(round(rate_rounded * 100, 2), "%")), color = "black", size = 3) +
ggcourt(labels = teams(px)) +
scale_fill_gradient2(name = "Attack rate (%)", labels = scales::percent_format(accuracy = 0.01))
html_name <- paste0("Distribuzione", i, ".html")
saveWidget(fig, html_name)
}
for (i in 1:6){
attack_rate <- px %>%
dplyr::filter(skill == "Attack", team == teamName, visiting_setter_position == i) %>%
group_by(team, start_zone) %>%
dplyr::summarize(n_attacks = n()) %>%
mutate(rate = n_attacks/sum(n_attacks)) %>%
ungroup
attack_rate <- cbind(attack_rate, dv_xy(attack_rate$start_zone, end = "lower"))
tm2i <- attack_rate$team == teams(px)[2]
attack_rate[tm2i, c("x", "y")] <- dv_flip_xy(attack_rate[tm2i, c("x", "y")])
attack_rate$rate_rounded <- round(attack_rate$rate, 2)
fig <- ggplot(attack_rate, aes(x, y, fill = rate_rounded)) +
geom_tile() +
geom_text(aes(label = paste0(round(rate_rounded * 100, 2), "%")), color = "black", size = 3) +
ggcourt(labels = teams(px)) +
scale_fill_gradient2(name = "Attack rate (%)", labels = scales::percent_format(accuracy = 0.01))
html_name <- paste0("Distribuzione", i, ".html")
saveWidget(fig, html_name)
}
for (i in 1:6){
attack_rate <- px %>% dplyr::filter(skill == "Attack", team == teamName, visiting_setter_position == i) %>%
group_by(team, start_zone) %>% dplyr::summarize(n_attacks = n()) %>%
mutate(rate = n_attacks/sum(n_attacks)) %>% ungroup
## add x, y coordinates associated with the zones
attack_rate <- cbind(attack_rate, dv_xy(attack_rate$start_zone, end = "lower"))
## for team 2, these need to be on the top half of the diagram
tm2i <- attack_rate$team == teams(px)[2]
attack_rate[tm2i, c("x", "y")] <- dv_flip_xy(attack_rate[tm2i, c("x", "y")])
#ggplot(attack_rate, aes(x, y, fill = rate)) + geom_tile() + ggcourt(labels = teams(px)) + scale_fill_gradient2(name = "Attack rate")
# Round the rate to the second digit
attack_rate$rate_rounded <- round(attack_rate$rate, 2)
# Plotting with rounded percentage on each position
fig <- ggplot(attack_rate, aes(x, y, fill = rate_rounded)) +
geom_tile() +
geom_text(aes(label = paste0(round(rate_rounded * 100, 2), "%")), color = "black", size = 3) +
ggcourt(labels = teams(px)) +
scale_fill_gradient2(name = "Attack rate (%)", labels = scales::percent_format(accuracy = 0.01))
html_name <- paste0("Distribuzione", i, ".html")
#saveWidget(fig, html_name)
}
for (i in 1:6){
attack_rate <- px %>% dplyr::filter(skill == "Attack", team == teamName, visiting_setter_position == i) %>%
group_by(team, start_zone) %>% dplyr::summarize(n_attacks = n()) %>%
mutate(rate = n_attacks/sum(n_attacks)) %>% ungroup
## add x, y coordinates associated with the zones
attack_rate <- cbind(attack_rate, dv_xy(attack_rate$start_zone, end = "lower"))
## for team 2, these need to be on the top half of the diagram
tm2i <- attack_rate$team == teams(px)[2]
attack_rate[tm2i, c("x", "y")] <- dv_flip_xy(attack_rate[tm2i, c("x", "y")])
#ggplot(attack_rate, aes(x, y, fill = rate)) + geom_tile() + ggcourt(labels = teams(px)) + scale_fill_gradient2(name = "Attack rate")
# Round the rate to the second digit
attack_rate$rate_rounded <- round(attack_rate$rate, 2)
# Plotting with rounded percentage on each position
fig <- ggplot(attack_rate, aes(x, y, fill = rate_rounded)) +
geom_tile() +
geom_text(aes(label = paste0(round(rate_rounded * 100, 2), "%")), color = "black", size = 3) +
ggcourt(labels = teams(px)) +
scale_fill_gradient2(name = "Attack rate (%)", labels = scales::percent_format(accuracy = 0.01))
html_name <- paste0("Distribuzione", i, ".html")
saveWidget(fig, html_name)
}
for (i in 1:6){
attack_rate <- px %>% dplyr::filter(skill == "Attack", team == teamName, visiting_setter_position == i) %>%
group_by(team, start_zone) %>% dplyr::summarize(n_attacks = n()) %>%
mutate(rate = n_attacks/sum(n_attacks)) %>% ungroup
## add x, y coordinates associated with the zones
attack_rate <- cbind(attack_rate, dv_xy(attack_rate$start_zone, end = "lower"))
## for team 2, these need to be on the top half of the diagram
tm2i <- attack_rate$team == teams(px)[2]
attack_rate[tm2i, c("x", "y")] <- dv_flip_xy(attack_rate[tm2i, c("x", "y")])
#ggplot(attack_rate, aes(x, y, fill = rate)) + geom_tile() + ggcourt(labels = teams(px)) + scale_fill_gradient2(name = "Attack rate")
# Round the rate to the second digit
attack_rate$rate_rounded <- round(attack_rate$rate, 2)
# Plotting with rounded percentage on each position
ggplot(attack_rate, aes(x, y, fill = rate_rounded)) +
geom_tile() +
geom_text(aes(label = paste0(round(rate_rounded * 100, 2), "%")), color = "black", size = 3) +
ggcourt(labels = teams(px)) +
scale_fill_gradient2(name = "Attack rate (%)", labels = scales::percent_format(accuracy = 0.01))
html_name <- paste0("Distribuzione", i, ".html")
saveWidget(fig, html_name)
}
fig
saveWidget(fig, html_name)
saveWidget(fig, "Distribuzione")
saveWidget(fig, "Distribuzione.html")
saveWidget(fig, "Distr.html")
library(ggplot2)
library(htmlwidgets)
for (i in 1:6) {
attack_rate <- px %>%
dplyr::filter(skill == "Attack", team == teamName, visiting_setter_position == i) %>%
group_by(team, start_zone) %>%
dplyr::summarize(n_attacks = n()) %>%
mutate(rate = n_attacks/sum(n_attacks)) %>%
ungroup
attack_rate <- cbind(attack_rate, dv_xy(attack_rate$start_zone, end = "lower"))
tm2i <- attack_rate$team == teams(px)[2]
attack_rate[tm2i, c("x", "y")] <- dv_flip_xy(attack_rate[tm2i, c("x", "y")])
attack_rate$rate_rounded <- round(attack_rate$rate, 2)
fig <- ggplot(attack_rate, aes(x, y, fill = rate_rounded)) +
geom_tile() +
geom_text(aes(label = paste0(round(rate_rounded * 100, 2), "%")), color = "black", size = 3) +
ggcourt(labels = teams(px)) +
scale_fill_gradient2(name = "Attack rate (%)", labels = scales::percent_format(accuracy = 0.01))
html_name <- paste0("Distribuzione", i, ".html")
# Save the plot as an HTML file
saveWidget(fig, file = html_name)
}
install.packages("datavolley", repos = 'https://cloud.r-project.org')
library(blackmarbler)
library(geodata)
library(sf)
library(terra)
library(ggplot2)
library(tidyterra)
library(lubridate)
#### Define NASA bearer token
token <- "eyJ0eXAiOiJKV1QiLCJvcmlnaW4iOiJFYXJ0aGRhdGEgTG9naW4iLCJzaWciOiJlZGxqd3RwdWJrZXlfb3BzIiwiYWxnIjoiUlMyNTYifQ.eyJ0eXBlIjoiVXNlciIsInVpZCI6Im1pcmtvOTgiLCJleHAiOjE3MjUzNTk1MTMsImlhdCI6MTcyMDE3NTUxMywiaXNzIjoiRWFydGhkYXRhIExvZ2luIn0.6KrS82Gb6rjTbIaBXROQrNfJRXCH7NH3si_UQgz5h3h5lsEiemz63LJL1X1YnMqpMAr0Pik2_LbA5PDKRtLqgaBKEnMFSsppuDHu4p0Pa7OBTWNBbYCEsuIZ2yfwVIc2sfr0g37g2hSaHqDcXMBGrppzrGCZtx10pDbmrrIdfnVE7tsFADhdPGryIgjs0XrDjSzSvLt9Z9MaPo-fXrWItTRoaSpa8aEaAsB3w7E4XX_wnLw54xfighLY-19ERWoEMyHGc6UaZGpkMZk3zyvVTGJnkmqJL1QvW3w0DfSRx0kW8TnFlfPrQ7Ay2N5t-n-wpApvPu-d_qloBNNtZx1eew"
bearer <- token
####  ITALY
### ROI
# Define region of interest (roi). The roi must be (1) an sf polygon and (2)
# in the WGS84 (epsg:4326) coordinate reference system. Here, we use the
# getData function to load a polygon of Ghana
roi_sf <- gadm(country = "ITA", level=1, path = tempdir())
### Daily data
r_20190601 <- bm_raster(roi_sf = roi_sf,
product_id = "VNP46A1",
date = "2019-06-01",
bearer = bearer)
r_20240510 <- bm_raster(roi_sf = roi_sf,
product_id = "VNP46A2",
date = "2024-05-10",
bearer = bearer)
#### Setup
# Load packages
library(blackmarbler)
library(geodata)
library(sf)
library(terra)
library(ggplot2)
library(tidyterra)
library(lubridate)
#### Define NASA bearer token
token <- "eyJ0eXAiOiJKV1QiLCJvcmlnaW4iOiJFYXJ0aGRhdGEgTG9naW4iLCJzaWciOiJlZGxqd3RwdWJrZXlfb3BzIiwiYWxnIjoiUlMyNTYifQ.eyJ0eXBlIjoiVXNlciIsInVpZCI6Im1pcmtvOTgiLCJleHAiOjE3MjUzNTk1MTMsImlhdCI6MTcyMDE3NTUxMywiaXNzIjoiRWFydGhkYXRhIExvZ2luIn0.6KrS82Gb6rjTbIaBXROQrNfJRXCH7NH3si_UQgz5h3h5lsEiemz63LJL1X1YnMqpMAr0Pik2_LbA5PDKRtLqgaBKEnMFSsppuDHu4p0Pa7OBTWNBbYCEsuIZ2yfwVIc2sfr0g37g2hSaHqDcXMBGrppzrGCZtx10pDbmrrIdfnVE7tsFADhdPGryIgjs0XrDjSzSvLt9Z9MaPo-fXrWItTRoaSpa8aEaAsB3w7E4XX_wnLw54xfighLY-19ERWoEMyHGc6UaZGpkMZk3zyvVTGJnkmqJL1QvW3w0DfSRx0kW8TnFlfPrQ7Ay2N5t-n-wpApvPu-d_qloBNNtZx1eew"
bearer <- token
####  ITALY
### ROI
# Define region of interest (roi). The roi must be (1) an sf polygon and (2)
# in the WGS84 (epsg:4326) coordinate reference system. Here, we use the
# getData function to load a polygon of Ghana
roi_sf <- gadm(country = "ITA", level=1, path = tempdir())
### Daily data
r_20190601 <- bm_raster(roi_sf = roi_sf,
product_id = "VNP46A1",
date = "2019-06-01",
bearer = bearer)
### Daily data
r_20190601 <- bm_raster(roi_sf = roi_sf,
product_id = "VNP46A2",
date = "2019-06-01",
bearer = bearer)
### Daily data
r_20190601 <- bm_raster(roi_sf = roi_sf,
product_id = "VNP46A2",
date = "2019-06-02",
bearer = bearer)
#### Setup
# Load packages
library(blackmarbler)
library(geodata)
library(sf)
library(terra)
library(ggplot2)
library(tidyterra)
library(lubridate)
#### Define NASA bearer token
token <- "eyJ0eXAiOiJKV1QiLCJvcmlnaW4iOiJFYXJ0aGRhdGEgTG9naW4iLCJzaWciOiJlZGxqd3RwdWJrZXlfb3BzIiwiYWxnIjoiUlMyNTYifQ.eyJ0eXBlIjoiVXNlciIsInVpZCI6Im1pcmtvOTgiLCJleHAiOjE3MjUzNTk1MTMsImlhdCI6MTcyMDE3NTUxMywiaXNzIjoiRWFydGhkYXRhIExvZ2luIn0.6KrS82Gb6rjTbIaBXROQrNfJRXCH7NH3si_UQgz5h3h5lsEiemz63LJL1X1YnMqpMAr0Pik2_LbA5PDKRtLqgaBKEnMFSsppuDHu4p0Pa7OBTWNBbYCEsuIZ2yfwVIc2sfr0g37g2hSaHqDcXMBGrppzrGCZtx10pDbmrrIdfnVE7tsFADhdPGryIgjs0XrDjSzSvLt9Z9MaPo-fXrWItTRoaSpa8aEaAsB3w7E4XX_wnLw54xfighLY-19ERWoEMyHGc6UaZGpkMZk3zyvVTGJnkmqJL1QvW3w0DfSRx0kW8TnFlfPrQ7Ay2N5t-n-wpApvPu-d_qloBNNtZx1eew"
bearer <- token
####  ITALY
### ROI
# Define region of interest (roi). The roi must be (1) an sf polygon and (2)
# in the WGS84 (epsg:4326) coordinate reference system. Here, we use the
# getData function to load a polygon of Ghana
roi_sf <- gadm(country = "ITA", level=1, path = tempdir())
### Daily data
r_20190601 <- bm_raster(roi_sf = roi_sf,
product_id = "VNP46A2",
date = "2019-06-01",
bearer = bearer)
####  ITALY
### ROI
# Define region of interest (roi). The roi must be (1) an sf polygon and (2)
# in the WGS84 (epsg:4326) coordinate reference system. Here, we use the
# getData function to load a polygon of Ghana
roi_sf <- gadm(country = "ITA", level=1, path = tempdir())
source("C:/Users/mirko/Downloads/light_pollution.R")
####  ITALY
### ROI
# Define region of interest (roi). The roi must be (1) an sf polygon and (2)
# in the WGS84 (epsg:4326) coordinate reference system. Here, we use the
# getData function to load a polygon of Ghana
roi_sf <- gadm(country = "ITA", level=1, path = tempdir())
library(blackmarbler)
library(geodata)
library(sf)
library(terra)
library(ggplot2)
library(tidyterra)
library(lubridate)
#### Define NASA bearer token
token <- "eyJ0eXAiOiJKV1QiLCJvcmlnaW4iOiJFYXJ0aGRhdGEgTG9naW4iLCJzaWciOiJlZGxqd3RwdWJrZXlfb3BzIiwiYWxnIjoiUlMyNTYifQ.eyJ0eXBlIjoiVXNlciIsInVpZCI6Im1pcmtvOTgiLCJleHAiOjE3MjUzNTk1MTMsImlhdCI6MTcyMDE3NTUxMywiaXNzIjoiRWFydGhkYXRhIExvZ2luIn0.6KrS82Gb6rjTbIaBXROQrNfJRXCH7NH3si_UQgz5h3h5lsEiemz63LJL1X1YnMqpMAr0Pik2_LbA5PDKRtLqgaBKEnMFSsppuDHu4p0Pa7OBTWNBbYCEsuIZ2yfwVIc2sfr0g37g2hSaHqDcXMBGrppzrGCZtx10pDbmrrIdfnVE7tsFADhdPGryIgjs0XrDjSzSvLt9Z9MaPo-fXrWItTRoaSpa8aEaAsB3w7E4XX_wnLw54xfighLY-19ERWoEMyHGc6UaZGpkMZk3zyvVTGJnkmqJL1QvW3w0DfSRx0kW8TnFlfPrQ7Ay2N5t-n-wpApvPu-d_qloBNNtZx1eew"
bearer <- token
####  ITALY
### ROI
# Define region of interest (roi). The roi must be (1) an sf polygon and (2)
# in the WGS84 (epsg:4326) coordinate reference system. Here, we use the
# getData function to load a polygon of Ghana
roi_sf <- gadm(country = "ITA", level=1, path = tempdir())
### Daily data
r_20190601 <- bm_raster(roi_sf = roi_sf,
product_id = "VNP46A2",
date = "2019-06-01",
bearer = bearer)
remove.packages("sf")
install.packages("sf")
install.packages("sf")
#### Setup
# Load packages
library(blackmarbler)
library(geodata)
library(sf)
library(terra)
library(ggplot2)
library(tidyterra)
library(lubridate)
#### Define NASA bearer token
token <- "eyJ0eXAiOiJKV1QiLCJvcmlnaW4iOiJFYXJ0aGRhdGEgTG9naW4iLCJzaWciOiJlZGxqd3RwdWJrZXlfb3BzIiwiYWxnIjoiUlMyNTYifQ.eyJ0eXBlIjoiVXNlciIsInVpZCI6Im1pcmtvOTgiLCJleHAiOjE3MjUzNTk1MTMsImlhdCI6MTcyMDE3NTUxMywiaXNzIjoiRWFydGhkYXRhIExvZ2luIn0.6KrS82Gb6rjTbIaBXROQrNfJRXCH7NH3si_UQgz5h3h5lsEiemz63LJL1X1YnMqpMAr0Pik2_LbA5PDKRtLqgaBKEnMFSsppuDHu4p0Pa7OBTWNBbYCEsuIZ2yfwVIc2sfr0g37g2hSaHqDcXMBGrppzrGCZtx10pDbmrrIdfnVE7tsFADhdPGryIgjs0XrDjSzSvLt9Z9MaPo-fXrWItTRoaSpa8aEaAsB3w7E4XX_wnLw54xfighLY-19ERWoEMyHGc6UaZGpkMZk3zyvVTGJnkmqJL1QvW3w0DfSRx0kW8TnFlfPrQ7Ay2N5t-n-wpApvPu-d_qloBNNtZx1eew"
bearer <- token
####  ITALY
### ROI
# Define region of interest (roi). The roi must be (1) an sf polygon and (2)
# in the WGS84 (epsg:4326) coordinate reference system. Here, we use the
# getData function to load a polygon of Ghana
roi_sf <- gadm(country = "ITA", level=1, path = tempdir())
### Daily data
r_20190601 <- bm_raster(roi_sf = roi_sf,
product_id = "VNP46A2",
date = "2019-06-01",
bearer = bearer)
library(blackmarbler)
library(geodata)
library(sf)
library(terra)
library(ggplot2)
library(tidyterra)
library(lubridate)
#### Define NASA bearer token
token <- "eyJ0eXAiOiJKV1QiLCJvcmlnaW4iOiJFYXJ0aGRhdGEgTG9naW4iLCJzaWciOiJlZGxqd3RwdWJrZXlfb3BzIiwiYWxnIjoiUlMyNTYifQ.eyJ0eXBlIjoiVXNlciIsInVpZCI6Im1pcmtvOTgiLCJleHAiOjE3MjUzNTk1MTMsImlhdCI6MTcyMDE3NTUxMywiaXNzIjoiRWFydGhkYXRhIExvZ2luIn0.6KrS82Gb6rjTbIaBXROQrNfJRXCH7NH3si_UQgz5h3h5lsEiemz63LJL1X1YnMqpMAr0Pik2_LbA5PDKRtLqgaBKEnMFSsppuDHu4p0Pa7OBTWNBbYCEsuIZ2yfwVIc2sfr0g37g2hSaHqDcXMBGrppzrGCZtx10pDbmrrIdfnVE7tsFADhdPGryIgjs0XrDjSzSvLt9Z9MaPo-fXrWItTRoaSpa8aEaAsB3w7E4XX_wnLw54xfighLY-19ERWoEMyHGc6UaZGpkMZk3zyvVTGJnkmqJL1QvW3w0DfSRx0kW8TnFlfPrQ7Ay2N5t-n-wpApvPu-d_qloBNNtZx1eew"
bearer <- token
####  ITALY
### ROI
# Define region of interest (roi). The roi must be (1) an sf polygon and (2)
# in the WGS84 (epsg:4326) coordinate reference system. Here, we use the
# getData function to load a polygon of Ghana
roi_sf <- gadm(country = "ITA", level=1, path = tempdir())
### Daily data
r_20190601 <- bm_raster(roi_sf = roi_sf,
product_id = "VNP46A2",
date = "2019-06-01",
bearer = bearer)
####  ITALY
### ROI
# Define region of interest (roi). The roi must be (1) an sf polygon and (2)
# in the WGS84 (epsg:4326) coordinate reference system. Here, we use the
# getData function to load a polygon of Ghana
roi_sf <- gadm(country = "ITA", level=2, path = tempdir())
### Daily data
r_20190601 <- bm_raster(roi_sf = roi_sf,
product_id = "VNP46A2",
date = "2019-06-01",
bearer = bearer)
library(blackmarbler)
library(geodata)
library(sf)
library(terra)
library(ggplot2)
library(tidyterra)
library(lubridate)
#### Define NASA bearer token
token <- "eyJ0eXAiOiJKV1QiLCJvcmlnaW4iOiJFYXJ0aGRhdGEgTG9naW4iLCJzaWciOiJlZGxqd3RwdWJrZXlfb3BzIiwiYWxnIjoiUlMyNTYifQ.eyJ0eXBlIjoiVXNlciIsInVpZCI6Im1pcmtvOTgiLCJleHAiOjE3MjUzNTk1MTMsImlhdCI6MTcyMDE3NTUxMywiaXNzIjoiRWFydGhkYXRhIExvZ2luIn0.6KrS82Gb6rjTbIaBXROQrNfJRXCH7NH3si_UQgz5h3h5lsEiemz63LJL1X1YnMqpMAr0Pik2_LbA5PDKRtLqgaBKEnMFSsppuDHu4p0Pa7OBTWNBbYCEsuIZ2yfwVIc2sfr0g37g2hSaHqDcXMBGrppzrGCZtx10pDbmrrIdfnVE7tsFADhdPGryIgjs0XrDjSzSvLt9Z9MaPo-fXrWItTRoaSpa8aEaAsB3w7E4XX_wnLw54xfighLY-19ERWoEMyHGc6UaZGpkMZk3zyvVTGJnkmqJL1QvW3w0DfSRx0kW8TnFlfPrQ7Ay2N5t-n-wpApvPu-d_qloBNNtZx1eew"
bearer <- token
####  ITALY
### ROI
# Define region of interest (roi). The roi must be (1) an sf polygon and (2)
# in the WGS84 (epsg:4326) coordinate reference system. Here, we use the
# getData function to load a polygon of Ghana
roi_sf <- gadm(country = "ITA", level=1, path = tempdir())
### Daily data
r_20190601 <- bm_raster(roi_sf = roi_sf,
product_id = "VNP46A2",
date = "2019-06-01",
bearer = bearer)
remotes::install_github("openvolley/datavolley")
## now extract the play-by-play component from each and bind them together
px <- list()
source("~/GitHub/CuneoWebsite.io/All Statistics/BestPlayer.R")
px
View(px)
unique_player_names <- unique(px$skill)
unique_player_names
unique_player_names <- unique(px$player_name)
source("~/GitHub/CuneoWebsite.io/All Statistics/BestPlayer.R")
View(final_table)
punti_totali_table <- px %>%
filter(skill %in% c("Block", "Attack", "Serve")) %>%
group_by(player_name) %>%
summarize(Punti_totali = sum(evaluation_code == '#'))
errori_table <- px %>%
filter(skill %in% c("Block", "Attack", "Serve", "Reception", "Set")) %>%
group_by(player_name) %>%
summarize(Errori = sum(evaluation_code == '='))
punti_totali_table
final_table <- battuta_table %>%
left_join(ricezione_table, by = "player_name") %>%
left_join(attack_table, by = "player_name") %>%
left_join(muro_table, by = "player_name") %>%
left_join(punti_totali_table, by = "player_name") %>%
left_join(errori_table, by = "player_name")
final_table
View(final_table)
### Include role
path <- dir("C:\Users\mirko\Documents\GitHub\CuneoWebsite.io\All Statistics\Torino.sq")
### Include role
path <- dir(r"C:\Users\mirko\Documents\GitHub\CuneoWebsite.io\All Statistics\Torino.sq")
### Include role
file_content <- readLines("C:/Users/mirko/Documents/GitHub/CuneoWebsite.io/All Statistics/Torino.sq")
data_lines <- file_content[-c(1, 2)]
split_data <- strsplit(data_lines, "\t")
df <- do.call(rbind, lapply(split_data, function(x) c(x[3], x[5], x[6])))
df <- as.data.frame(df, stringsAsFactors = FALSE)
colnames(df) <- c("Cognome", "Nome", "Ruolo")
print(df)
View(split_data)
df <- do.call(rbind, lapply(split_data, function(x) c(x[2], x[4], x[5])))
df <- as.data.frame(df, stringsAsFactors = FALSE)
View(df)
df <- do.call(rbind, lapply(split_data, ))
df <- do.call(rbind, lapply(split_data, function(x) c(x[2], x[3], x[4], x[5],)))
df <- as.data.frame(df, stringsAsFactors = FALSE)
View(df)
df <- do.call(rbind, lapply(split_data, function(x) c(x[0], x[3], x[4], x[5],)))
df <- as.data.frame(df, stringsAsFactors = FALSE)
View(df)
df <- do.call(rbind, lapply(split_data, function(x) c(x[0], x[3], x[4], x[5],)))
View(df)
df <- do.call(rbind, lapply(split_data, function(x) c(x[3], x[5], x[6])))
df <- do.call(rbind, lapply(split_data, function(x) c(x[0], x[5], x[6])))
View(df)
df <- do.call(rbind, lapply(split_data, function(x) c(x[4], x[5], x[6])))
View(df)
df <- do.call(rbind, lapply(split_data, function(x) c(x[3], x[5], x[6])))
View(df)
df <- do.call(rbind, lapply(split_data, function(x) c(x[3], x[6], x[6])))
View(df)
df <- do.call(rbind, lapply(split_data, function(x) c(x[3], x[4], x[6])))
View(df)
df <- do.call(rbind, lapply(split_data, function(x) c(x[3], x[7], x[6])))
View(df)
df <- do.call(rbind, lapply(split_data, function(x) c(x[3], x[8], x[6])))
View(df)
df <- do.call(rbind, lapply(split_data, function(x) c(x[3], x[0], x[6])))
View(df)
df <- do.call(rbind, lapply(split_data, function(x) c(x[3], x[5], x[6])))
View(df)
df <- do.call(rbind, lapply(split_data, function(x) c(x[3], x[5])))
View(df)
df <- do.call(rbind, lapply(split_data, function(x) c(x[3], x[8], x[9])))
df <- as.data.frame(df, stringsAsFactors = FALSE)
View(df)
df <- do.call(rbind, lapply(split_data, function(x) c(x[3], x[9], x[10])))
df <- as.data.frame(df, stringsAsFactors = FALSE)
View(battuta_table)
View(df)
View(final_table)
View(ricezione_table)
View(px)
df$player_name <- paste(df$Nome, df$Cognome)
file_content <- readLines("C:/Users/mirko/Documents/GitHub/CuneoWebsite.io/All Statistics/Torino.sq")
data_lines <- file_content[-c(1, 2)]
split_data <- strsplit(data_lines, "\t")
df <- do.call(rbind, lapply(split_data, function(x) c(x[3], x[9], x[10])))
df <- as.data.frame(df, stringsAsFactors = FALSE)
colnames(df) <- c("Cognome", "Nome", "Ruolo")
df$player_name <- paste(df$Nome, df$Cognome)
df <- df %>%
mutate(role = case_when(
Ruolo == "1" ~ "Libero",
Ruolo == "2" ~ "Schiacciatore",
Ruolo == "3" ~ "Opposto",
Ruolo == "4" ~ "Centrale",
Ruolo == "5" ~ "Palleggiatore",
TRUE ~ "Unknown"  # in case there are unexpected values
))
View(df)
df1$player_name <- paste(df$Nome, df$Cognome)
role <- df %>%
select(player_name, role)
View(role)
final_table <- battuta_table %>%
left_join(ricezione_table, by = "player_name") %>%
left_join(attack_table, by = "player_name") %>%
left_join(muro_table, by = "player_name") %>%
left_join(punti_totali_table, by = "player_name") %>%
left_join(errori_table, by = "player_name") %>%
left_join(role, by = "player_name")
print(final_table)
View(final_table)
library(shiny)
library(DT)
# Define UI
ui <- fluidPage(
titlePanel("Statistiche totali Serie B"),
DTOutput("table")
)
# Define Server
server <- function(input, output, session) {
output$table <- renderDT({
datatable(final_table, options = list(pageLength = 10, autoWidth = TRUE))
})
}
# Run the app
shinyApp(ui = ui, server = server)
library(datavolley)
setwd("C:/Users/mirko/Documents/GitHub/CuneoWebsite.io/All Statistics")
setwd("C:/Users/mirko/Documents/GitHub/CuneoWebsite.io/All Scoreboard")
setwd("C:/Users/mirko/Documents/GitHub/CuneoWebsite.io/Scoreboard")
d <- list.files("", pattern = "dvw$", full.names = TRUE)
d <- list.files(pattern = "dvw$", full.names = TRUE)
lx <- list()
# Read each file with error handling
for (fi in seq_along(d)) {
tryCatch({
lx[[fi]] <- dv_read(d[fi], insert_technical_timeouts = FALSE)
}, error = function(e) {
message("Error reading file ", d[fi], ": ", e$message)
# If the error is specifically about the [3SCOUT] section, try to read without it
if (grepl("\\[3SCOUT\\]", e$message)) {
message("Attempting to read file without [3SCOUT] section")
file_content <- readLines(d[fi])
scout_index <- grep("\\[3SCOUT\\]", file_content)
if (length(scout_index) > 0) {
file_content <- file_content[1:(scout_index-1)]
temp_file <- tempfile(fileext = ".dvw")
writeLines(file_content, temp_file)
lx[[fi]] <- dv_read(temp_file, insert_technical_timeouts = FALSE)
file.remove(temp_file)
}
}
})
}
## now extract the play-by-play component from each and bind them together
px <- list()
for (fp in seq_along(lx)) px[[fp]] <- plays(lx[[fp]])
px <- do.call(rbind, px)
unique_player_names <- unique(px$player_name)
print(unique_player_names)
unique_player_names <- unique_player_names[!is.na(unique_player_names)]
print(unique_player_names)
